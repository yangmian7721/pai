<?xml version="1.0"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
-->

<configuration>
   
    <property>
        <name>yarn.nodemanager.resource.cpu-vcores</name>
        <value>24</value>
        <description>Number of CPU cores that can be allocated for containers.</description>
    </property>

    <property>
        <name>yarn.nodemanager.resource.memory-mb</name>
        <value>180224</value>
        <description>Number of memory that can be allocated for containers.</description>
    </property>

    <property>
        <name>yarn.resourcemanager.max-completed-applications</name>
        <value>1000</value>
        <description>maximum number of completed applications</description>
    </property>

    <property>
        <name>yarn.scheduler.maximum-allocation-mb</name>
        <value>1048576</value>
        <description>default is 8GB, here we set 1024G</description>
    </property>

    <property>
      <name>yarn.resourcemanager.scheduler.class</name>
      <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler</value>
    </property>

    <property>
      <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
      <value>org.apache.hadoop.mapred.ShuffleHandler</value>
    </property>

    <property>
      <name>yarn.nodemanager.delete.debug-delay-sec</name>
      <value>86400</value>
    </property>

    <property>
      <name>yarn.resourcemanager.store.class</name>
      <value>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore</value>
    </property>

    <property>
      <name>yarn.resourcemanager.zk-address</name>
      <value>10.151.40.234:2181</value>
    </property>

    <property>
      <name>yarn.resourcemanager.recovery.enabled</name>
      <value>true</value>
    </property>

    <property>
      <name>yarn.log-aggregation-enable</name>
      <value>true</value>
    </property>

    <property>
      <name>yarn.log-aggregation.retain-seconds</name>
      <value>604800</value>
    </property>

    <property>
      <name>yarn.nodemanager.remote-app-log-dir</name>
      <value>/sys/logs</value>
    </property>

    <property>
      <name>yarn.resourcemanager.hostname</name>
      <value>10.151.40.234</value>
    <description>The hostname of the RM.</description>
    </property>

    <property>
      <name>yarn.nodemanager.hostname</name>
      <value>10.151.40.228</value>
    </property>  

    <property>  
      <name>yarn.nodemanager.aux-services</name>  
      <value>mapreduce_shuffle</value>  
    </property>

    <property>
      <name>yarn.node-labels.enabled</name>
      <value>true</value>
    </property>

    <property>
      <name>yarn.node-labels.fs-store.root-dir</name>
      <value>hdfs://10.151.40.234:9000/yarn/node-labels</value>
    </property>

    <property>
      <name>yarn.app.mapreduce.am.staging-dir</name>
      <value>/tmp/hadoop-yarn/staging</value>
    </property>

    <property>
      <name>yarn.log.server.url</name>
      <value>http://10.151.40.234:8188/applicationhistory/logs</value>
    </property>
    
    <property>
      <name>yarn.nodemanager.recovery.enabled</name>
      <value>true</value>
    </property>
    
    <property>
      <name>yarn.nodemanager.recovery.dir</name>
      <value>/var/lib/yarn/yarn-nm-recovery</value>
    </property>

    <property>
      <name>yarn.nodemanager.log-dirs</name>
      <value>/var/lib/yarn/userlogs</value>
    </property>

    <property>
      <name>yarn.nodemanager.address</name>
      <value>10.151.40.228:8041</value>
    </property>

    <property>
       <name>yarn.timeline-service.enabled</name>
       <value>true</value>
    </property>

    <property>
       <name>yarn.resourcemanager.system-metrics-publisher.enabled</name>
       <value>true</value>
    </property>

    <property>
        <name>yarn.timeline-service.generic-application-history.enabled</name>
        <value>true</value>
    </property>

    <property>
        <name>yarn.timeline-service.hostname</name>
        <value>10.151.40.234</value>
    </property>

    <property>
        <name>yarn.timeline-service.bind-host</name>
        <value>0.0.0.0</value>
    </property>

    <property>
        <name>yarn.timeline-service.generic-application-history.max-applications</name>
        <value>1000</value>
    </property>

    <property>
        <name>yarn.timeline-service.generic-application-history.fs-history-store.uri</name>
        <value>/yarn/timeline/generic-history</value>
    </property>

    <property>
        <name>yarn.timeline-service.ttl-enable</name>
        <value>true</value>
    </property>

    <property>
        <name>yarn.timeline-service.ttl-ms</name>
        <value>2419200000</value>
    </property>

    <property>
        <name>yarn.timeline-service.handler-thread-count</name>
        <value>16</value>
    </property>

    <property>
       <name>yarn.timeline-service.generic-application-history.store-class</name>
       <value>org.apache.hadoop.yarn.server.applicationhistoryservice.FileSystemApplicationHistoryStore</value>
    </property>

   <property>
       <name>yarn.timeline-service.generic-application-history.save-non-am-container-meta-info</name>
        <value>true</value>
   </property>

    <property>
        <name>yarn.timeline-service.http-cross-origin.enabled</name>
        <value>true</value>
    </property>

  <property>
    <description>Percentage of GPU that can be allocated
      for containers. This setting allows users to limit the amount of
      GPU that YARN containers use. Currently functional only
      on Linux using cgroups. The default is to use 100% of GPU.
    </description>
    <name>yarn.nodemanager.resource.percentage-physical-gpu-limit</name>
    <value>100</value>
  </property>

  <property>
    <description>enable port as resource</description>
    <name>yarn.ports_as_resource.enable</name>
    <value>true</value>
  </property>

  <property>
    <description>enable bitset store</description>
    <name>yarn.ports_bitset_store.enable</name>
    <value>false</value>
  </property>

  <property>
    <description>Nodemanager port value ranges for serving</description>
    <name>yarn.nodemanager.resource.ports</name>
    <value>[100-65535]</value>
  </property>
  <property>
    <description>Rounds of updating ports. This parameter is circle controller for updating
      local allocated ports info, since the ports info is big. We can control the
      update frequency to have balance with cluster scale and ports info's
      accuracy</description>
    <name>yarn.nodemanager.resource.ports-update-rounds</name>
    <value>10</value>
  </property>

  <property>
    <description>exclude the gpus which is used by unknown process</description>
    <name>yarn.gpu_exclude_ownerless_gpu.enable</name>
    <value>true</value>
  </property>

  <property>
    <description>the gpu memory threshold to indicate a gpu is used by unknown process</description>
    <name>yarn.gpu_not_ready_memory_threshold-mb</name>
    <value>20</value>
  </property>
  
  <property>
    <name>yarn.resourcemanager.rm.container-allocation.expiry-interval-ms</name>
    <value>1200000</value>
  </property>

  <property>
    <name>yarn.nm.liveness-monitor.expiry-interval-ms</name>
    <value>900000</value>
  </property>

  <property>
    <name>yarn.am.liveness-monitor.expiry-interval-ms</name>
    <value>1000000</value>
  </property>

  <property>
    <name>yarn.resourcemanager.container-tokens.master-key-rolling-interval-secs</name>
    <value>88000</value>
  </property>
  
</configuration>